<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE doc SYSTEM "nl/justobjects/xbook/rsc/dtd/doc.dtd" >
<doc>
    <front>
        <title>Pushlets - Installation</title>
        <id>$Id: installation.xml,v 1.5 2009/04/16 10:48:42 justb Exp $</id>
        <author>
            <name>Just van den Broecke</name>
            <organization>Just Objects B.V.</organization>
            <email>just[AT]justobjects.nl</email>
        </author>
        <date>$Date: 2009/04/16 10:48:42 $</date>
        <abstract>
            This document describes
            the installation and deployment of the pushlet distribution.
            It applies to version $[VERSION].
        </abstract>
    </front>
    <middle>

        <section1 title="Installation">
            <section2 title="Unpack Distribution">
                Unzip pushlet-x.y.z.zip or tar xzvf pushlet-x.y.z-tar.gz.

            </section2>

            <section2 title="Directories">
                <para>The unpacked distribution should contain the following directories:</para>
                <as-is>
                    /client additional (non-J2SE) clients
                    /src all Java sources
                    /webapps pushlet.war file with the examples; also unpacked in the pushlet subdir
                    /doc all documentation
                    /lib the pushlet.jar and pushletclient.jar libraries
                    /thirdparty external libraries
                </as-is>
                <para>From here on file names starting with "/" are referred from the top of the
                    install dir.
                </para>
            </section2>

            <section2 title="Getting from CVS">
                <para>If you want to check out the current version from CVS, follow the instructions
                    on<link href="http://sourceforge.net/cvs/?group_id=62939">
                        http://sourceforge.net/cvs/?group_id=62939</link>.
                    Anonynmous CVS checkout can be done as follows:
                </para>
                <as-is>
                    cvs -d:pserver:anonymous@pushlets.cvs.sourceforge.net:/cvsroot/pushlets login

                    cvs -z3 -d:pserver:anonymous@pushlets.cvs.sourceforge.net:/cvsroot/pushlets co pushlets
                </as-is>
            </section2>

            <section2 title="Rebuilding">
                <para>Assuming you have Ant installed, you can rebuild the .jars and .war in this distribution by typing
                    <code>ant</code>
                    in the toplevel directory.
                    <code>/build.xml</code>
                    is the Ant build file for all jars and wars.
                </para>
                <para>If you want to rebuild an entire distribution from CVS which includes documentation, you need to
                    use the build
                    file<code>/build-dist.xml</code>. Pass this build file to ant as follows:<code>ant -f
                        build-dist.xml</code>.
                    If you don't care about building the documentation you may as well use
                    <code>/build.xml</code>
                    with the CVS version.
                </para>
                <para>
                    There is one nasty issue which makes the XBook documentation generation fail (NullPointerException
                    or ArrayOutOfBoundsException) in some cases when building the distribution
                    (using /build-dist.xml) from CVS.
                    This has to do with xalan.jar in your CLASSPATH, either in the Ant lib dir or in J2SE 1.4 runtime.
                    xalan.jar is also present in xbookaux.jar but must be in the same classloader as xbook.jar. I
                    resolved this by
                    putting both xbook jars (under /thirdparty/justobjects/xbook) in the Ant lib dir (and removing
                    xalan.jar).


                </para>
            </section2>
        </section1>

        <section1 title="Running the Examples">
            <para>
                Now we will try to run the examples.
                The examples are contained in the /webapps dir and are ready to be deployed
                using
                <code>/webapps/pushlet.war</code>.
            </para>
            <section2 title="Server Requirements">
                <para>
                    You need to have a servlet engine that supports
                    servlet API 2.1 or higher and possibly JSP 1.0+ (for examples only, pushlets themselves don't
                    require JSP). Examples
                    of servlet engines are
                    Tomcat (jakarta.apache.org), Resin (www.caucho.com).
                    Most servlet engines now support the J2EE standard. By using web.xml and .war files
                    deployment is greatly facilitated.
                </para>
                <para>
                    See
                    <link href="compatibility.html">compatibility.html</link>
                    for a list of compatible servlet
                    engines and browsers.

                </para>
                <para>
                    Some notes:
                </para>
                <list>
                    <item>
                        <para>The servlet engine must be able to find
                            <code>/webapps/pushlet/WEB-INF/lib/pushlet.jar</code>.
                            Either it must be in the CLASSPATH or automatically
                            deployed using J2EE configuration files.
                        </para>
                    </item>
                    <item>
                        <para>Pushlet properties like protocol parameters are configured in
                            <code>/webapps/pushlet/WEB-INF/classes/pushlet.properties</code>.
                            When the web application initializes these properties are read from
                            the CLASSPATH
                        </para>
                    </item>
                    <item>
                        <para>Event sources for the examples are configured in
                            <code>/webapps/pushlet/WEB-INF/classes/sources.properties</code>.
                            When the web application initializes the event sources are automatically
                            instantiated when enabled in pushlet.properties.
                        </para>
                    </item>
                    <item>
                        <para>
                            <code>/webapps/WEB-INF/web.xml</code>
                            specifies the servlets (currently only the Pushlet servlet) and their mappings.

                        </para>
                        <para>
                            The
                            <code>Pushlet</code>
                            servlet is required for the pushlet protcol.
                            (postlet and pullet servlets are no longer required/supported).
                            <code>Pushlet.init()</code>
                            is used for framework initialization.

                        </para>
                    </item>

                </list>
            </section2>

            <section2 title="Deploying pushlet.war">
                <para>With J2EE-compliant servers such as Apache Tomcat and JBoss,
                    deployment of the examples will be as simple
                    as dropping
                    <code>/webapps/pushlet.war</code>
                    into Tomcat's webapps directory.
                    Using JBoss is really cool since it supports hot deploy, i.e. you don't have
                    to restart the server for each deployment.
                    The Ant script in
                    <code>/build.xml</code>
                    contains a target to deploy pushlet.war.
                    You need to adapt the deployment
                    directory in
                    <code>/build.properties</code>
                    to point to your local deployment
                    directory (e.g. /webapps for Tomcat).
                </para>
            </section2>
            <section2 title="Verifying the Examples">
                <para>Run your servlet engine with the deployed
                    <code>pushlet.war</code>
                    and browse to http://&lt;your-host:port>/pushlet and
                    verify that the examples are working.
                </para>
            </section2>
            <section2 title="Troubleshooting">
                Although Pushlets have been shown to work in most Java servlet engines, there
                may be some reasons why things don't work for you.


                <section3 title="No events come through">
                    <para>
                        If you didn't had the above issues (servlet not found, sources.properties issues)
                        it may be that no events come through.
                        A common cause may be that your server is buffering
                        the events. Try waiting a very long time (minutes) and see if
                        a burst comes through. Then it may very well be that
                        your server buffers. This has been observed in particular with
                        Apache. Other causes of buffering may be inbetween proxy servers.
                    </para>
                    <para>
                        You may try to force "pull" for all pushlet sessions mode using
                        <code>listen.force.pull.all=true</code>
                        in pushlet.properties.
                    </para>
                </section3>

                <section3 title="No events come through - mod_jk or mod_proxy(_ajp)">
                    <para>
                        When you use a setup with Apache HTTP server connected to Tomcat
                        through mod_jk or mod_proxy/mod_proxy_ajp you may find that output is buffered when using
                        Pushlet streaming mode.
                        Events will come through after a long time (i.e. when buffer is filled).
                        This issue is also general Comet issue in an Apache/Tomcat setup.
                        The solution is to force the Apache-Tomcat internal connection to flush all packets.
                    </para>
                    <para>
                        mod_jk: see
                        <link href="http://dev.zhourenjian.com/blog/2007/07/29/ridiculous-mod_jk-problem-with-flush-method.html">
                            this blog post
                        </link>
                        for
                        a solution using<code>"JkOptions +FlushPackets"</code>.

                    </para>
                    <para>
                        mod_proxy/mod_proxy_ajp: see
                        <link href="http://tinyurl.com/czs4wn">
                            this mail
                        </link>
                        for
                        a solution using e.g.<code>"ProxyPass ajp://localhost:8009/pushlet flushpackets=on"</code>.

                    </para>
                </section3>


            </section2>
        </section1>


    </middle>
</doc>




